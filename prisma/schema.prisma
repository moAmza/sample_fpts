generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Follow {
  id                               Int      @id @default(autoincrement())
  createdAt                        DateTime @db.Timestamptz(6)
  updatedAt                        DateTime @db.Timestamptz(6)
  userId                           Int?
  followerId                       Int?
  followingId                      Int?
  follower            User?   @relation("followers", fields: [followerId], references: [id])
  following           User?   @relation("followings", fields: [followingId], references: [id])
  user                User?   @relation("follows_userIdTousers", fields: [userId], references: [id])
	@@map("follows")
}

model Like {
  id                         Int       @id @default(autoincrement())
  createdAt                  DateTime? @db.Timestamptz(6)
  updatedAt                  DateTime? @db.Timestamptz(6)
  userId                     Int?
  likerId                    Int?
  likeeId                    Int?
  weekId                     Int?
  likee           User?    @relation("likes_likeeIdTousers", fields: [likeeId], references: [id])
  liker           User?    @relation("likes_likerIdTousers", fields: [likerId], references: [id])
  user            User?    @relation("likes_userIdTousers", fields: [userId], references: [id])
  week                       Week?    @relation(fields: [weekId], references: [id])
	@@map("likes")
}

model PlayerStats {
  id        Int       @id @default(autoincrement())
  score     Int
  price     Int
  createdAt DateTime? @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
  playerId  Int?
  weekId    Int?
  player    Player?  @relation(fields: [playerId], references: [id])
  week      Week?    @relation(fields: [weekId], references: [id])
	@@map("playerStats")
}

model Player {
  id                                                   Int               @id @default(autoincrement())
  firstName                                            String            @db.VarChar(255)
  secondName                                           String            @db.VarChar(255)
  webname                                              String?           @db.VarChar(255)
  club                                                 String            @db.VarChar(255)
  role                                                 String            @db.VarChar(255)
  createdAt                                            DateTime?         @db.Timestamptz(6)
  updatedAt                                            DateTime?         @db.Timestamptz(6)
  playerStats                                          PlayerStats[]
  recrutments                                          Recrutment[]
  replacementLogs_playersToreplacementLogs_newPlayerId ReplacementLog[] @relation("playersToreplacementLogs_newPlayerId")
  replacementLogs_playersToreplacementLogs_oldPlayerId ReplacementLog[] @relation("playersToreplacementLogs_oldPlayerId")
  replacementLogs_playersToreplacementLogs_playerId    ReplacementLog[] @relation("playersToreplacementLogs_playerId")
	@@map("players")
}

model Recrutment {
  id          Int       @id @default(autoincrement())
  positionNum Int
  expiredAt   DateTime? @db.Timestamptz(6)
  createdAt   DateTime? @db.Timestamptz(6)
  updatedAt   DateTime? @db.Timestamptz(6)
  isPlaying   Boolean   @default(false)
  playerId    Int?
  teamId      Int?
  player      Player?  @relation(fields: [playerId], references: [id])
  team        Team?    @relation(fields: [teamId], references: [id])
	@@map("recrutments")
}

model ReplacementLog {
  id                                           Int       @id @default(autoincrement())
  createdAt                                    DateTime? @db.Timestamptz(6)
  position                                     Int
  updatedAt                                    DateTime  @db.Timestamptz(6)
  weekId                                       Int?
  teamId                                       Int?
  playerId                                     Int?
  oldPlayerId                                  Int?
  newPlayerId                                  Int?
  newPlayer            Player?  @relation("playersToreplacementLogs_newPlayerId", fields: [newPlayerId], references: [id])
  oldPlayer            Player?  @relation("playersToreplacementLogs_oldPlayerId", fields: [oldPlayerId], references: [id])
  player               Player?  @relation("playersToreplacementLogs_playerId", fields: [playerId], references: [id])
  team                                         Team?    @relation(fields: [teamId], references: [id])
  week                                         Week?    @relation(fields: [weekId], references: [id])
	@@map("replacementLogs")
}

model Team {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  credit          Int?
  createdAt       DateTime?         @db.Timestamptz(6)
  updatedAt       DateTime?         @db.Timestamptz(6)
  userId          Int?
  user            User?            @relation(fields: [userId], references: [id])
  recrutments     Recrutment[]
  replacementLogs ReplacementLog[]
	@@map("teams")
}

model User {
  id                                 Int       @id @default(autoincrement())
  username                           String    @db.VarChar(255)
  password                           String    @db.VarChar(255)
  firstname                          String    @db.VarChar(255)
  lastname                           String    @db.VarChar(255)
  country                            String    @db.VarChar(255)
  profileImage                       String?   @db.VarChar(255)
  birthday                           DateTime  @db.Timestamptz(6)
  email                              String    @db.VarChar(255)
  createdAt                          DateTime  @db.Timestamptz(6)
  updatedAt                          DateTime  @db.Timestamptz(6)
  followers      Follow[] @relation("followers")
  followings     Follow[] @relation("followings")
  follows_follows_userIdTousers      Follow[] @relation("follows_userIdTousers")
  likes_likes_likeeIdTousers         Like[]   @relation("likes_likeeIdTousers")
  likes_likes_likerIdTousers         Like[]   @relation("likes_likerIdTousers")
  likes_likes_userIdTousers          Like[]   @relation("likes_userIdTousers")
  team                               Team[]
	@@map("users")
}

model Week {
  id              Int               @id @default(autoincrement())
  weekNum         Int
  endDate         DateTime          @db.Timestamptz(6)
  deadlineDate    DateTime          @db.Timestamptz(6)
  isCurrent       Boolean?          @default(false)
  isNext          Boolean?          @default(false)
  isPrevious      Boolean?          @default(false)
  createdAt       DateTime          @db.Timestamptz(6)
  updatedAt       DateTime          @db.Timestamptz(6)
  likes           Like[]
  playerStats     PlayerStats[]
  replacementLogs ReplacementLog[]
	@@map("weeks")
}

model Verifier {
  id              Int               @id @default(autoincrement())
  code            Int
  count           Int
  email           String            @db.VarChar(255)
  userInfo        Json              
  createdAt       DateTime          @db.Timestamptz(6)
  updatedAt       DateTime          @db.Timestamptz(6)
	@@map("verifier")
}
